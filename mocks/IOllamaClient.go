// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/ollama/ollama/api"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// IOllamaClient is an autogenerated mock type for the IOllamaClient type
type IOllamaClient struct {
	mock.Mock
}

// Chat provides a mock function with given fields: ctx, req, fn
func (_m *IOllamaClient) Chat(ctx context.Context, req *api.ChatRequest, fn api.ChatResponseFunc) error {
	ret := _m.Called(ctx, req, fn)

	if len(ret) == 0 {
		panic("no return value specified for Chat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.ChatRequest, api.ChatResponseFunc) error); ok {
		r0 = rf(ctx, req, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Copy provides a mock function with given fields: ctx, req
func (_m *IOllamaClient) Copy(ctx context.Context, req *api.CopyRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.CopyRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, req, fn
func (_m *IOllamaClient) Create(ctx context.Context, req *api.CreateRequest, fn api.CreateProgressFunc) error {
	ret := _m.Called(ctx, req, fn)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.CreateRequest, api.CreateProgressFunc) error); ok {
		r0 = rf(ctx, req, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBlob provides a mock function with given fields: ctx, digest, r
func (_m *IOllamaClient) CreateBlob(ctx context.Context, digest string, r io.Reader) error {
	ret := _m.Called(ctx, digest, r)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) error); ok {
		r0 = rf(ctx, digest, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, req
func (_m *IOllamaClient) Delete(ctx context.Context, req *api.DeleteRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DeleteRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Embed provides a mock function with given fields: ctx, req
func (_m *IOllamaClient) Embed(ctx context.Context, req *api.EmbedRequest) (*api.EmbedResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Embed")
	}

	var r0 *api.EmbedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.EmbedRequest) (*api.EmbedResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.EmbedRequest) *api.EmbedResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.EmbedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.EmbedRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Embeddings provides a mock function with given fields: ctx, req
func (_m *IOllamaClient) Embeddings(ctx context.Context, req *api.EmbeddingRequest) (*api.EmbeddingResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Embeddings")
	}

	var r0 *api.EmbeddingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.EmbeddingRequest) (*api.EmbeddingResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.EmbeddingRequest) *api.EmbeddingResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.EmbeddingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.EmbeddingRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Generate provides a mock function with given fields: ctx, req, fn
func (_m *IOllamaClient) Generate(ctx context.Context, req *api.GenerateRequest, fn api.GenerateResponseFunc) error {
	ret := _m.Called(ctx, req, fn)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.GenerateRequest, api.GenerateResponseFunc) error); ok {
		r0 = rf(ctx, req, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Heartbeat provides a mock function with given fields: ctx
func (_m *IOllamaClient) Heartbeat(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Heartbeat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx
func (_m *IOllamaClient) List(ctx context.Context) (*api.ListResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *api.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*api.ListResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *api.ListResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRunning provides a mock function with given fields: ctx
func (_m *IOllamaClient) ListRunning(ctx context.Context) (*api.ProcessResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListRunning")
	}

	var r0 *api.ProcessResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*api.ProcessResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *api.ProcessResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ProcessResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pull provides a mock function with given fields: ctx, req, fn
func (_m *IOllamaClient) Pull(ctx context.Context, req *api.PullRequest, fn api.PullProgressFunc) error {
	ret := _m.Called(ctx, req, fn)

	if len(ret) == 0 {
		panic("no return value specified for Pull")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.PullRequest, api.PullProgressFunc) error); ok {
		r0 = rf(ctx, req, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Push provides a mock function with given fields: ctx, req, fn
func (_m *IOllamaClient) Push(ctx context.Context, req *api.PushRequest, fn api.PushProgressFunc) error {
	ret := _m.Called(ctx, req, fn)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.PushRequest, api.PushProgressFunc) error); ok {
		r0 = rf(ctx, req, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Show provides a mock function with given fields: ctx, req
func (_m *IOllamaClient) Show(ctx context.Context, req *api.ShowRequest) (*api.ShowResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Show")
	}

	var r0 *api.ShowResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.ShowRequest) (*api.ShowResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.ShowRequest) *api.ShowResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ShowResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.ShowRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Version provides a mock function with given fields: ctx
func (_m *IOllamaClient) Version(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIOllamaClient creates a new instance of IOllamaClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOllamaClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOllamaClient {
	mock := &IOllamaClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
