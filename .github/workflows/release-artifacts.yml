name: release-artifacts
on:
  workflow_call:
    inputs:
      release-version:
        description: "The release version to use"
        required: true
        type: string
      release-major:
        description: "Number representing major semver value"
        required: true
        type: string
      release-minor:
        description: "Number representing minor semver value"
        required: true
        type: string
      release-patch:
        description: "Number representing patch semver value"
        required: true
        type: string
      release-sha:
        description: "SHA that a GitHub release was tagged at"
        required: true
        type: string
      go-version:
        description: "The go version to use"
        default: "1.23"
        required: false
        type: string
      cosign-release:
        description: "The go version to use"
        default: "v2.4.3"
        required: false
        type: string

env:
  GO_VERSION: ${{ inputs.go-version }}
  COSIGN_RELEASE: ${{ inputs.cosign-release }}

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  build-release-binaries:
    if: github.repository == 'slawo/gollamas'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - uses: sigstore/cosign-installer@v3
      with:
        cosign-release: ${{ env.COSIGN_RELEASE }}

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: "~> v2"
        args: release --clean
        use_existing_draft: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - uses: actions/attest-build-provenance@v2
      with:
        subject-checksums: ./dist/checksums.txt

    - name: Artifact binaries
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.sha }}-binaries
        path: |
          dist/**/*_checksums.txt
          dist/**/*.tar.gz
          dist/**/*.zip
          dist/**/checksums.txt
        retention-days: 1

  buildx-release-docker:
    if: github.repository == 'slawo/gollamas'

    needs:
    - build-release-binaries

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0

    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
        pattern: "${{ github.sha }}-binaries"
        merge-multiple: true

    - name: Move binaries
      env:
        RELEASE_SEMVER: ${{ inputs.release-major }}.${{ inputs.release-minor }}.${{ inputs.release-patch }}
      run: |
        mkdir -p \
          .bin/linux/386 \
          .bin/linux/amd64 \
          .bin/linux/arm64 \
          .bin/linux/arm/v6 \
          .bin/linux/arm/v7 \
          .bin/linux/ppc64le \
          .bin/linux/riscv64 \
          .bin/linux/s390x
        tar -xzf dist/gollamas_${RELEASE_SEMVER}_linux_386.tar.gz     -C .bin/linux/386/
        tar -xzf dist/gollamas_${RELEASE_SEMVER}_linux_amd64.tar.gz   -C .bin/linux/amd64/
        tar -xzf dist/gollamas_${RELEASE_SEMVER}_linux_arm64.tar.gz   -C .bin/linux/arm64/
        tar -xzf dist/gollamas_${RELEASE_SEMVER}_linux_armv6.tar.gz   -C .bin/linux/arm/v6/
        tar -xzf dist/gollamas_${RELEASE_SEMVER}_linux_armv7.tar.gz   -C .bin/linux/arm/v7/
        tar -xzf dist/gollamas_${RELEASE_SEMVER}_linux_ppc64le.tar.gz -C .bin/linux/ppc64le/
        tar -xzf dist/gollamas_${RELEASE_SEMVER}_linux_riscv64.tar.gz -C .bin/linux/riscv64/
        tar -xzf dist/gollamas_${RELEASE_SEMVER}_linux_s390x.tar.gz   -C .bin/linux/s390x/

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      env:
        DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
      with:
        images: |
          ${{ vars.DOCKERHUB_USERNAME }}/gollamas
          ghcr.io/${{ github.repository }}
        tags: |
          type=sha,prefix=,suffix=,format=long
          type=semver,pattern={{major}},value=${{ inputs.release-version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ inputs.release-version }}
          type=semver,pattern={{major}}.{{minor}}.{{patch}},value=${{ inputs.release-version }}
          type=semver,pattern=v{{major}},value=${{ inputs.release-version }}
          type=semver,pattern=v{{major}}.{{minor}},value=${{ inputs.release-version }}
          type=semver,pattern=v{{major}}.{{minor}}.{{patch}},value=${{ inputs.release-version }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get Git commit timestamps
      run: echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV

    - name: Build and push docker images
      id: docker_build
      uses: docker/build-push-action@v6
      env:
        VERSION: ${{ steps.meta.outputs.version }}
        COMMIT_SHA: ${{github.sha}}
        SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}
      with:
        platforms: linux/amd64,linux/386,linux/arm64,linux/arm/v7,linux/arm/v6,linux/ppc64le,linux/riscv64,linux/s390x
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        annotations: ${{ steps.meta.outputs.annotations }}
        labels: ${{ steps.meta.outputs.labels }}
        context: .
